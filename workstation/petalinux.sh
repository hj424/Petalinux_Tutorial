#!bin/bash
# program:
#	Build a linux system for zc706 by Petalinux
# please type following command to execute this script:
#	$ chmod r+s petalinux.sh
#	$ ./petalinux.sh or $ sh petalinux.sh or $ source petalinux.sh

### configuration of petalinux ###
read -p "INFO: Please enter the absolute path of your workstation Petalinux: " petalinux
echo "INFO: Checking the validation of the workstation Petalinux..."
echo "INFO: Checking settings.sh..."
test -e $petalinux/settings.sh && echo "INFO: Settings.sh exist!" || valid_petalinux=0
while [ "$valid_petalinux" == "0" ]
do
  echo "INFO: No valid setting file for Petalinux found..."
  echo -e "INFO: Press \e[1;34m'CTRL+C'\e[0m to quit this script or ..."
  echo -e "INFO: Pay attention. Please input the ress \e[1;32mabsolute path\e[0m of your workstation petalinux!(\e[1;32me.g. /XX/XX/\e[0m)"
  read -p "INFO: Please try again: " petalinux
  test -e $petalinux/settings.sh && valid_petalinux=1 || valid_petalinux=0
done
echo "INFO: Starting source Petalinux..."  
source $petalinux/settings.sh
echo -e "\e[1;31m***CRITICAL***\e[0m INFO: Please check whether there are some critical errors!"
read -p "INFO: Press 'Y/y' to continue; press 'N/n' to exit: " src_petalinux
if  [ "$src_petalinux" == "Y" ] || [ "$src_petalinux" == "y" ]; then
  echo "INFO: User check pass."
elif [ "$src_petalinux" == "N" ] || [ "$src_petalinux" == "n" ]; then
  echo "INFO: User check failed... Exit script."
  exit 0
else
  echo "No legal input, just keep moving on..."
fi

### configure & build petalinux project ###
# select hardware platform
read -p "INFO: Please input the name of your petalinux project: " name_project
while [ "$name_project" == "" ]
do
  echo -e "INFO: \e[1;31mIllegal\e[0m name."
  read -p "INFO: Please try again: " name_project
done
echo "INFO: Hardware plarform generated by Xilinux SDK(.hdf), please input '1'; "
echo "INFO: Hardware platform of Board Support Package (.bsp), please input '2';"
read -p "INFO: Please select the source of hardware platform: " hardware_platform
while [ "$hardware_platform" != "1" ] && [ "$hardware_platform" != "2" ] 
do
  echo -e "INFO: \e[1;31mIllegal\e[0m input."
  read -p "INFO: Please input '1'(hardware platform defined by .hdf) or '2'(hardware platform defined by BSP): " hardware_platform
done

# build petalinux project
if [ "$hardware_platform" == "1" ]; then
  echo "INFO: The hardware platform you choose is .hdf file..."
  read -p "INFO: Please input the absolute path of the directory of your .hdf file (e.g. /XX/XX/): " hardware_platform_path
  read -p "INFO: Please input the name of your .hdf file (e.g. zc706.hdf): " hardware_platform_name
  hardware_platform_full1="$hardware_platform_path$hardware_platform_name"
  hardware_platform_full2="$hardware_platform_path/$hardware_platform_name"
  echo $hardware_platform_full1
  echo $hardware_platform_full2
  test -f $hardware_platform_full1 && echo "INFO: File exist!" || valid_hardware_platform1=0
  test -f $hardware_platform_full2 && echo "INFO: File exist!" || valid_hardware_platform2=0
  while [ "$valid_hardware_platform1" == "0" ] && [ "$valid_hardware_platform2" == "0" ]
  do
    echo "INFO: No such file in the given directory."
    echo -e "INFO: Pay attention, please input the \e[1;32mabsolute path\e[0m of the \e[1;32mdirectory\e[0m of your .hdf file (\e[1;33me.g. /XX/XX/\e[0m)"
    read -p "INFO: Please try input the absolute path of directory again:  " hardware_platform_path
    echo -e "INFO: Pay attention, please input the \e[1;32mname\e[0m of your .hdf file (\e[1;33me.g. zc706.hdf\e[0m)"
    read -p "INFO: Please try input the name of your .hdf file again:  " hardware_platform_name
    hardware_platform_full1="$hardware_platform_path$hardware_platform_name"
    hardware_platform_full2="$hardware_platform_path/$hardware_platform_name"
    test -f $hardware_platform_full1 && valid_hardware_platform1=1 || valid_hardware_platform1=0
    test -f $hardware_platform_full2 && valid_hardware_platform2=1 || valid_hardware_platform2=0
  done
  echo "INFO: Check passed! Start creating project: $name_project ..." 
  petalinux-create --type project --template zynq --name $name_project
  echo "INFO: Import hardware platform information..."
  cd $name_project

  # start general configuration
  echo -e "INFO: Configuration will start, please refer to the \e[1;32mpetalinux tutorial - ch2.txt\e[0m on github..." 
  read -p "INFO: Press "Y/y" to continue: " continue_config
  while [ "$continue_config" != "Y" ] && [ "$continue_config" != "y" ]
  do
    read -p "INFO: Please input legal input to continue! Press "Y/y" to continue: " continue_config
  done
  echo "INFO: Start general configuration..."
  petalinux-config --get-hw-description=$hardware_platform_path
  
else 
  echo "INFO: The hardware platform you choose is .bsp file..."
  read -p "INFO: Please input the absolute path of your .bsp file (e.g. XX/XX/zc706.bsp): " hardware_platform_full
  echo $hardware_platform_full
  test -e $hardware_platform_full && echo "INFO: File exist!" || valid_hardware_platform=0
  while [ "$valid_hardware_platform" == "0" ]
  do
    echo "INFO: No such file in the given directory. Please try again..."
    echo -e "INFO: Pay attention, please input the \e[1;32mabsolute path\e[0m of your .bsp file (\e[1;33me.g. XX/XX/zc706.bsp\e[0m)"
    read -p "INFO: Please try again: " hardware_platform_full
    test -e $hardware_platform_full && valid_hardware_platform=1 || valid_hardware_platform=0
  done
  echo "INFO: Check passed! Start creating project: $name_project ..."
  echo "INFO: Import hardware platform information..."
  petalinux-create -t project -s $hardware_platform_full --name $name_project 
  cd $name_project

  # start general configuration
  echo -e "INFO: Configuration will start, please refer to the \e[1;32mpetalinux tutorial - ch2.txt\e[0m on github..." 
  read -p "INFO: Press "Y/y" to continue: " continue_config
  while [ "$continue_config" != "Y" ] && [ "$continue_config" != "y" ]
  do
    read -p "INFO: Please input legal input to continue! Press "Y/y" to continue: " continue_config
  done
  echo "INFO: Start general configuration..."
  petalinux-config
fi

echo "INFO: Generation configuration finishes!"
echo -e "\e[1;31m***CRITICAL***\e[0m INFO: Please check whether there are errors during configuration!"

# start root file system configuration
read -p "INFO: Root file system configuration will start. Press "Y/y" to continue: " continue_config_rootfs
while [ "$continue_config_rootfs" != "Y" ] && [ "$continue_config_rootfs" != "y" ]
do
  read -p "INFO: Please input legal input to continue! Press "Y/y" to continue: " continue_config_rootfs
done
echo "INFO: Start root file system configuration..."
petalinux-config -c rootfs
echo "INFO: Root file system configuration finishes!"
echo -e "\e[1;31m***CRITICAL***\e[0m INFO: Please check whether there are errors during configuration!"

# start kernel configuration
read -p "INFO: Linux kernel configuration will start. Press "Y/y" to continue: " continue_config_kernel
while [ "$continue_config_kernel" != "Y" ] && [ "$continue_config_kernel" != "y" ]
do
  read -p "INFO: Please input legal input to continue! Press "Y/y" to continue: " continue_config_kernel
done
echo "INFO: Start kernel configuration..."
petalinux-config -c kernel
echo "INFO: Linux kernel configuration finishes!"
echo -e "\e[1;31m***CRITICAL***\e[0m INFO: Please check whether there are errors during configuration!"

# start extra configuration - enable xilinx clock ???
read -p "INFO: Extra configuration will start. Press "Y/y" to continue: " continue_config_extra
while [ "$continue_config_extra" != "Y" ] && [ "$continue_config_extra" != "y" ]
do
  read -p "INFO: Please input legal input to continue! Press "Y/y" to continue: " continue_config_extra
done
echo "INFO: Start extra configuration..."
echo -e "INFO: Adding \e[1;32mfollowing code\e[0m to file /subsystems/linux/configs/device-tree/system-top.dts"
echo "	&clkc{"
echo "		fclk-enable = <0xf>;"
echo "	};"
echo "	/ { "
echo "		xlnk {"
echo '		compatible = "xlnx,xlnk-1.0";'
echo '		clock-names = "xclk0","xclk1","xclk2","xclk3";'
echo "		clocks = <&clkc 15>, <&clkc 16>, <&clkc 17>, <&clkc 18>;"
echo "		};"
echo "	  };"


echo "	&clkc{" >> subsystems/linux/configs/device-tree/system-top.dts
echo "		fclk-enable = <0xf>;" >> subsystems/linux/configs/device-tree/system-top.dts
echo "	};"  >> subsystems/linux/configs/device-tree/system-top.dts
echo "	/ { " >> subsystems/linux/configs/device-tree/system-top.dts
echo "		xlnk {" >> subsystems/linux/configs/device-tree/system-top.dts
echo '		compatible = "xlnx,xlnk-1.0";' >> subsystems/linux/configs/device-tree/system-top.dts
echo '		clock-names = "xclk0","xclk1","xclk2","xclk3";' >> subsystems/linux/configs/device-tree/system-top.dts
echo "		clocks = <&clkc 15>, <&clkc 16>, <&clkc 17>, <&clkc 18>;" >> subsystems/linux/configs/device-tree/system-top.dts
echo "		};" >> subsystems/linux/configs/device-tree/system-top.dts
echo "	  };" >> subsystems/linux/configs/device-tree/system-top.dts

echo "INFO: Extra configuration finishes!"
echo -e "\e[1;31m***CRITICAL***\e[0m INFO: Please check whether code showed below is appended in the following file!"
cat subsystems/linux/configs/device-tree/system-top.dts
read -p "INFO:  Press "Y/y" to continue: " continue_config_check
while [ "$continue_config_check" != "Y" ] && [ "$continue_config_check" != "y" ]
do
  read -p "INFO: Please input illegal input to continue! Press "Y/y" to continue: " continue_config_check
done
echo "INFO: User check passed!"

# start build project
echo "INFO: Start building petalinux project... This may take some time..."
petalinux-build
echo -e "\e[1;31m***CRITICAL***\e[0m INFO: Please check whether there are some errors during building!"

# package kernel, device tree and rootfs
cd images/linux/
echo "INFO: Wrap the generated kernel and rootfs with a U-Boot header..."
petalinux-package --image -c kernel --format uImage
echo "INFO: Rename device tree BLOB and ramdisk"
mv system.dtb devicetree.dtb
mv rootfs.cpio.gz uramdisk.image.gz
echo "INFO: Build finishes!"
echo "INFO: If there is no error during the whole process, you will find your petalinux project in the current folder."
echo -e "INFO: All the Linux files are in \e[1;33m$name_project/images/linux/\e[0m"
echo "*****1. uImage - Linux kernel"
echo "*****2. devicetree.dtb - Linux device tree"
echo "*****3. uramdisk.image.gz - Linux root file system"
echo "INFO: Script finishes!"

